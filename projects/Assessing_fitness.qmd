---
title: "Assessing Fitness"
author: "Austin Kaduk & David Raju"
date: "2024-10-27"
format: html
editor: visual
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
```

```{r Data_Manipulation}
#| echo: FALSE
#| results: "hide"
#| message: FALSE
#| Warning: FALSE

library(tidyverse)
library(RTLedu)

#Manipulating our data:
#Selecting Variables we want to work with in this project
fitness_df <- RTLedu::strava %>% 
  dplyr::select(
  Activity.Type, Date, Distance, Calories, Avg.HR, Max.HR, Aerobic.TE, 
  Avg.Run.Cadence, Max.Run.Cadence, Avg.Pace, Best.Pace, Total.Ascent,
  Total.Descent, Avg.Stride.Length, Moving.Time, Elapsed.Time, Min.Elevation,
  Max.Elevation, Runner
  )

#Removing commas from Min/Max Elevation in order to convert properly to numeric and converting all variables except for Activity.type, runner, and date to numeric values.
fitness_df_cleaned <- fitness_df %>% 
  dplyr::mutate(
    Min.Elevation = gsub(",","", Min.Elevation),
    Max.Elevation = gsub(",","", Max.Elevation)
    ) %>%
  dplyr::mutate(dplyr::across(-c(Activity.Type, Runner, Date), as.numeric))

#Removing NA's in run cadence, and filtering out elevation < 300 as this seems to be an error in the data, for tracking the real min elevation and max elevation, And made it so all data starts at a specific time period.
fitness_df_filtered <- fitness_df_cleaned %>% 
  dplyr::filter(!is.na(Min.Elevation), !is.na(Avg.Run.Cadence),!is.na(Total.Ascent), Moving.Time > 0, Date >= as.Date("2020-06-14"))

#Converting Time variables into minutes from seconds, creating a column for moving time as a percentage of elapsed time, converting track running data from hound from meters to KM's, remove all periods in column names and remove capitalization. Added Categories for Exercise intensity
fitness_df_formatted <- fitness_df_filtered %>% dplyr::mutate(
  dplyr::across(c(Elapsed.Time, Moving.Time, Avg.Pace, Best.Pace), ~ . / 60),
  Distance = ifelse(Activity.Type == "Track Running" & Runner =="Hound", 
                    Distance / 1000, Distance)) %>%
  dplyr::rename_with(~ gsub("\\.", "_", .)) %>%
  dplyr::rename_with(~ tolower(.))

fdf <- fitness_df_formatted

fdf_altered1 <- fdf %>% dplyr::select(-activity_type, -date, -runner, -runner, -min_elevation, -max_elevation) %>% 
  tidyr::drop_na()

fdfl <- fdf_altered1 %>%
  tidyr::pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
  tidyr::drop_na() %>%
  dplyr::group_by(variable)
#Removing the date Collie Climbed a mountain
fdf_final <- fdf %>%
  dplyr::select(date, distance, calories, avg_hr, aerobic_te, avg_run_cadence, avg_pace, total_ascent, total_descent, elapsed_time, avg_stride_length, runner) %>%
  dplyr::mutate(Net_elevation_gain = total_ascent - total_descent) %>%
  dplyr::mutate(avg_speed = (distance/(elapsed_time/60))) %>%
  dplyr::filter(!date %in% as.Date(c("2022-06-12")))

#Calculating Monthly Mean Values, Removing the date that Collie climed a mountain (outlier for ascent)
monthly_mean_values <- fdf_final %>%
  dplyr::mutate(year_month = floor_date(date, "month")) %>%
  dplyr::group_by(runner, year_month) %>%
  dplyr::summarise(
    calories = mean(calories),
    distance = mean(distance),
    aerobic_te = mean(aerobic_te, na.rm = TRUE),
    avg_hr = mean(avg_hr, na.rm = TRUE),
    avg_run_cadence = mean(avg_run_cadence, na.rm = TRUE),
    avg_pace = mean(avg_pace, na.rm = TRUE),
    avg_ascent = mean(total_ascent, na.rm = TRUE),
    avg_descent = mean(total_descent, na.rm = TRUE),
    avg_stride = mean(avg_stride_length, na.rm = TRUE),
    avg_time = mean(elapsed_time, na.rm = TRUE),
    avg_speed = mean(avg_speed, na.rm = TRUE),
    avg_elevation_gain = mean(Net_elevation_gain, na.rm = TRUE),
    .groups = 'keep'
    )

#Calculating Cumulative Sum Values
cum_val <- fdf_final %>%
  tidyr::drop_na() %>%
  dplyr::arrange(date) %>%
  dplyr::group_by(runner) %>%
  dplyr::mutate(
    cum_calories = cumsum(calories),
    cum_distance = cumsum(distance),
    cum_aerobic_te = cumsum(aerobic_te),
    cum_cadence = cumsum(avg_run_cadence),
    cum_hr = cumsum(avg_hr),
    cum_pace = cumsum(avg_pace),
    cum_ascent = cumsum(total_ascent),
    cum_descent = cumsum(total_descent),
    cum_time = cumsum(elapsed_time),
    cum_stride = cumsum(avg_stride_length),
    cum_gain = cumsum(Net_elevation_gain)
  ) %>%
  dplyr::select(-calories, -distance, -aerobic_te, -avg_run_cadence, -avg_hr, -avg_pace,-total_ascent, -total_descent, -elapsed_time, -avg_stride_length, -Net_elevation_gain, -avg_speed)


#___________________________Finished_data_manipulation________________________

#Possibly Remove Aerobic_te_category from the code above as it might not be used for our data.

```

# Summary

-   We have identified five critical variables for measuring fitness: average pace, average heart rate, distance, total ascent and aerobic total expenditure.

-   Both the runners show positive trends overall, with Collie excelling in technical efficiency and consistent progression like maintaining better speed, stride length and aerobic total expenditure, whereas Hound shows higher energy output with varying improvements for cumulative distance and energy expenditure over the years.

-   Collie does well in technical metrics like aerobic total expenditure, average speed, average cadence, stride length, with consistent training patterns and steady elevation gains, focused on trail running with lower injury risk.

-   Hound has higher total distance and caloric expenditure with variable training intensities and stronger peak performances, focused on track and street running with higher injury risk.

-   We recommend Hound for coaching for fitness, since he shown greater optimization potential, strong adaptation skill set, and better room for structured growth through periodization training and recovery management.

# Understanding Fitness

In order to understand fitness, we first need to observe our variables that we are working with, lets take a brief look at how our variables work with each other. We will be analyzing Correlation between our variables through the Spearman Method.

In order to understand fitness, we first need to observe how our variables interact. Since we are working with **continuous performance data,** it is essential that we analyze the relationships between key variables. In this context, we focus on detecting **monotonic relationships**—for example, the correlation between faster paces and higher cadence. To achieve this, the **Spearman correlation** method is well-suited for capturing these associations since we can see which measurements have a strong correlation between each other, both positive and negative in a range of \[-1, 1\].

This analysis allows us to better understand how the variables contribute to defining fitness and help guide our approach to evaluating overall performance.

```{r Spearman_Correlation_plot, fig.width = 8, fig.height= 5}
#| echo: FALSE
#| message: false
#| Warning: false

corMat <- stats::cor(fdf_altered1, method = "spearman")

graphics::par(cex = 0.6, mar = c(20,20,10,10))
p2 <- corrplot::corrplot(
  corr = corMat,
  method = "number",
  order = "AOE",
  type = "upper"
)
```

This correlation analysis reveals clear monotonic relationships, such as the strong correlation between average stride length and average pace. We’d expect faster runners to have shorter stride lengths because increasing speed is often achieved by increasing cadence, or steps per minute, rather than stride length. By taking quicker, shorter strides, runners minimize ground contact time, enhance efficiency, and reduce impact on their joints, which contributes to maintaining higher speeds

## **Distributions**

Next we are going to analyze the distributions of our variables in order to capture if there is any abnormalities.

```{r Distribution_of_variables, fig.width=8, fig.height= 8}
#| echo: FALSE
#| message: false
#| Warning: false
fdf %>% 
  dplyr::select_if(is.numeric) %>%
  tidyr::pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
  tidyr::drop_na() %>%
  ggplot2::ggplot(aes(x = value)) +
  geom_histogram(bins = 30, fill = "skyblue", color = "black") +
  facet_wrap(~ variable, scales = "free") +
  labs(title = "Distribution of Fitness variables", x ="", y ="")

```

From the analysis of our distributions, we can clearly see that we are working with data from two different runners, with a noticeable **bi-modal** relationship in elevation, average heart rate, max run cadence, and stride length. We can also see that there are significantly **right-skewed variables** especially those related to **distance, time, elevation,** and **calories.** Indicating that while most activities are moderate intensity, a few activities are significantly longer, higher in elevation, or more intense.

An important thing to note is the presence of outliers in our data, which suggest different running conditions or exceptional efforts being made by the runners in our data.

## How does our data behave?

Here we are trying to understand how our data behaves, specifically we are trying to see if our data exhibits **stationarity**, **seasonality**, **multicollinearity**, and **normality**.

```{r Testing_normality_Jarque_Bera}
#| echo: FALSE
#| results: "hide"
#| message: false
#| Warning: false

#Testing Normality
library(broom)
normalts <- fdfl %>%
  dplyr::do(broom::tidy(tseries::jarque.bera.test(.$value)))
```

```{r Testing_Stationary_in_level_KPSS}
#| echo: FALSE
#| results: "hide"
#| message: false
#| Warning: false

#Testing Stationarity In level
levelst <- fdfl %>%
  dplyr::do(broom::tidy(tseries::kpss.test(.$value, null = c("Level"))))
print(levelst)
```

```{r Testing_Stationary_in_trend_KPSS}
#| echo: FALSE
#| results: "hide"
#| message: false
#| Warning: false

#Testing Stationarity in trend
trendst <- fdfl %>%
  dplyr::do(broom::tidy(tseries::kpss.test(.$value, null = c("Trend"))))
print(trendst)
```

```{r Testing_Stationary_ADF}
#| echo: FALSE
#| results: "hide"
#| message: false
#| Warning: false

#Testing ADF for stationarity
adfst <- fdfl %>%
  dplyr::do(broom::tidy(tseries::adf.test(.$value, alternative = c("stationary"))))
print(adfst)
```

### **Summary of all tests P-values:**

```{r Combining_P_values}
#| echo: FALSE
#| message: false
#| Warning: false
stationarity_results <- data.frame(
  Variable = sort(colnames(fdf_altered1)),
  Normal_p_value = round(normalts$p.value, 4),
  adf_p_value = round(adfst$p.value, 4),
  KP_Level_p_value = round(levelst$p.value, 4),
  KP_trend_p_value = round(trendst$p.value, 4)
)
print(stationarity_results, row.names = FALSE)
```

Since our **Jarque-Bera** test results show a low p-value for all variables except for Average Stride Length, we must reject the null that our data is normally distributed, and **assume it is not normal**. However, after analysis of our Correlation Matrix, we are making the decision to not use the following variables in our regression analysis: Average Stride Length, Moving Time, Max Heart Rate, Best Pace, and Maximum Run Cadence.

Given that our results from ADF indicate that the series could be stationary while the KPSS test suggests that **non-stationarity remains**, especially within the trend component. It is clear we are going to need to do further analysis on trend and seasonality.

## Understanding our remaining variables:

```{r Time_Series_Pairs_plot}
#removing variables that are not useful for us.
library(GGally)
library(ggplot2)

fdf_altered2 <- fdf_altered1 %>% 
  dplyr::select(-moving_time, -max_hr, -best_pace, -max_run_cadence)
fdf_altered2 %>%
  GGally::ggpairs(
    title = "Time Series Pairs Plot",
    upper = list(continuous = wrap("cor", size = 3)),
    lower = list(continuous = wrap("points", size = .5)), 
    diag = list(continuous = wrap("densityDiag", size = .5))
  ) +
  theme(
    axis.text.x = element_text(size = 8, angle = 90), 
    axis.text.y = element_text(size = 7.5),
    strip.text = element_text(size = 6)   
  )


```

This pairwise correlation plot provides a more detailed overview of key running metrics interact with each other, highlighting relationships that can inform performance evaluation and training strategies. Some of the most important insights that we can gain from this chart are the following:

There are positive relationships between the following pairs:

Distance and Calories (0.935), Total Ascent and Distance (0.476), Total Ascent and Total Descent (0.851)

What we can gain from understanding these positive relationships is that as a runner covers more distance, calorie expenditure increases proportionally. When our runners take on more elevation gain, they also tend to cover longer distances. Suggesting a pattern of tackling challenging terrains during longer runs. Lastly, we can analyze that our runners typically are returning to their starting elevation, which is typical in looped or hiking trails.

There are interesting negative correlations between the following pairs:

Average Stride Length and Total Descent (-0.648), Aerobic Training Effect and Average Pace (-0.299)

We can also understand that our runners typically are taking shorter steps when going downhill, likely to maintain control and balance. There is also a noticeable effect on our runners pace when they engage into more intense training sessions.

## Seasonality:

Now that we have a more clear picture on Stationarity, Multicolinearity, and Normality. It is time for us to understand the seasonality of our variables, for this analysis, we have decided to analyze: Distance, Total Ascent, Average Pace, Average Run Cadence, and Aerobic TE.

```{r Testing_out}
#| include: false

ses.df <- fdf %>% 
  select(date, runner,  distance, avg_hr, aerobic_te, avg_run_cadence, avg_pace, total_ascent) %>%
  mutate(date = ymd(date)) %>%
  mutate(date = tsibble::yearmonth(date)) %>%
  group_by(date) %>%
  dplyr::summarise(
    distance = mean(distance),
    avg_hr = mean(avg_hr),
    aerobic_te = mean(aerobic_te),
    avg_run_cadence = mean(avg_run_cadence, na.rm = TRUE),
    avg_pace = mean(avg_pace),
    total_ascent = mean(total_ascent, na.rm = TRUE),
    .groups = "keep"
  )

ts_data_list <- ses.df %>%
  dplyr::select(date, distance, total_ascent, avg_pace, avg_run_cadence, aerobic_te) %>%
  purrr::map(~ts(.x, start = c(year(min(ses.df$date)), month(min(ses.df$date))), frequency = 12))
stl_results <- ts_data_list %>%
  purrr::map(~ stl(.x, s.window = "periodic"))

```

```{r STL_Distance}
#STL Decomp for Distance
graphics::plot(stl_results$distance, main = "STL Decomposition for Distance")
```

**Trend:** The upward trend indicates that our runner's have a steady improvement in endurance, as they are consistently able to cover more distance over time. This can be seen as a positive indicator of increased cardiovascular fitness.

**Seasonality:** There is a recurring seasonal pattern where distance increases and decreases at specific intervals, more specifically our runners cover more distance in the summer months and less distance in the winter months.

**Residuals:** The occasional outliers indicate that our runners may have had some periods of exceptional performance or periods where external factors may have impacted the runner's performance.

```{r STL_Ascent}
#STL Decomp for Total Ascent
graphics::plot(stl_results$total_ascent, main = "STL Decomposition for Total Ascent")
```

**Trend:** The trend suggests that our runners are gradually incorporating more challenging routes over time, this is important because it improves muscle strength and endurance.

**Seasonality:** There are visible seasonal peaks, which may correspond to our runners favoring trail running during certain times of the year, the most noticeable peaks are nearest to the middle of the year (summer time).

**Residuals:** Outliers in the residuals are likely capturing exceptional efforts on more challenging terrain (i.e Mountain climbing)

```{r STL_Pace}
#STL Decomp for Average Pace
graphics::plot(stl_results$avg_pace, main = "STL Decomposition for Average Pace")
```

**Trend:** The overall trend tells us that our runners have had a gradual decrease in pace, indicating that they are getting faster over time.

**Seasonality:** Pace is fluctuating in a predictable pattern, with noticeable decreases in the summer time and increases near winter. This makes sense because our runners are likely not performing races in the winter time and they have a much better environment to run in without snow.

**Residuals:** Here the residuals capture moments of unusually fast or slow performances, indicating that our runners have performed in races and or challenging terrain.

```{r STL_Cadence}
#STL Decomp for Average Run Cadence
graphics::plot(stl_results$avg_run_cadence, main = "STL Decomposition for Average Run Cadence")
```

**Trend:** The Trend shows a slow upward movement, which suggests that our runners are slightly increasing their cadence overtime. This is good since a higher cadence generally reflects improved running efficiency and overall better running mechanics.

**Seasonality:** There is a repeating cycle in cadence, explaining that our runners undertake periods of more intense and structured training in the winter months. Suggesting that our runners gain a greater focus on improving running mechanics to pursue more intense events, such as races or hiking.

**Residuals:** Highlighting the irregularities in cadence during mid years show interesting information, we can see that our runners did better in their training in 2021 compared to 2022.

```{r STL_Aerobic_TE}
#STL Decomp for Aerobic TE
graphics::plot(stl_results$distance, main = "STL Decomposition for Aerobic TE")
```

**Trend:** The trend shows that our runners are sustaining high levels of cardiovascular effort over time, which suggests that aerobic capacity is being steadily challenged and improved.

**Seasonality:** The seasonal component reflects variations in the intensity of training. We can see that there is clear periods of high-intensity training in the summer time, with drop offs after followed by increases back to the peak indicates that our runners may be training for a race or taking it easy until the weather clears up.

**Residuals:** The outliers in the residuals show us where the training effect was much high or lower than expected, indicating either highly intense efforts or light recovery runs.

# **Defining Fitness**

**Fitness:** is the ability to maintain or improve cardiovascular endurance and muscular efficiency, with a focus on maintaining or enhancing key performance metrics (pace, heart rate, distance, and elevation gain) while minimizing physiological strain over time. Fitness reflects the ability to adapt to more challenging environments (elevation, distance) while minimizing effort (heart rate) and achieving higher performance (pace). Improvements in fitness should also indicate a greater ability to recover from intense physical activity, which demonstrate enhanced aerobic capacity and muscle endurance.

Our Most Important Variables for Tracking General Fitness are:

-   **Aerobic Training Effect**: is a primary indicator of cardiovascular impact, Aerobic TE should reflect the cumulative impact of multiple factors, including pace, heart rate, distance, and elevation. An improved fitness level would allow individuals to reach a high Aerobic TE with reduced heart rate and faster pace.

-   **Heart Rate** - Should decrease at similar intensities as cardiovascular efficiency improves

-   **Pace** - Should ideally get lower (faster speed) as fitness improves, even on more challenging terrains or over longer distances.

-   **Distance** and **Calories** - which measure the total activity level and energy expenditure, which should increase as fitness improves.

-   **Elevation Gain**- Tackling more challenging terrain indicates improved muscular strength and endurance.

-   **Cadence** - A higher cadence reflects better running mechanics and efficiency.

-   **Stride Length** - Maintaining or improving stride length indicates strength and mobility.

What we are looking for in terms of improvement over time:

-   **Lower Heart rate** for the same or greater distances.

-   **Increased pace** with reduced or stable heart rate.

-   **Increased Distance** or **calories** burned while maintaining or improving performance.

-   **Handling more elevation** with consistent or improved speed and effort.

```{r Calories_descent_reg}
#| include: FALSE
#Calories by total descent
cal_desc_reg <- fdf_final %>%
  ggplot2::ggplot(aes(x = total_descent, y = calories)) + 
  geom_point() +
  geom_smooth(method = "loess", se = FALSE, color = 'red') +
  labs(title = "Calories Over Total Descent", x = "Total Descent", y = "Calories")+
  facet_wrap(.~ runner, scales = "free")
```

```{r Calories_ascent_reg}
#Calorie by Total Ascent
cal_asc_reg <- fdf_final %>%
  ggplot2::ggplot(aes(x = total_ascent, y = calories)) + 
  geom_point() +
  geom_smooth(method = "loess", se = FALSE, color = 'red') +
  labs(title = "Calories Over Total Ascent", x = "Total Ascent", y = "Calories") +
  facet_wrap(.~ runner, scales = "free")
```

```{r Charts_time}
#Over the years in one Chunk
cal_time <- monthly_mean_values %>% 
  ggplot2::ggplot(aes(x = year_month, y = calories, color = runner)) +
  geom_line(size = 0.8) +
  labs(title = "Calories Burned Over the Years", x = "", y = "Calories") +
  theme(legend.position = "none")

cal_cum_time <- cum_val %>%
  ggplot2::ggplot(aes(x = date, y = cum_calories, color = runner)) +
  geom_line(size = 1) +
  labs(title = "Total Calories Burnt", x ="", y = "", color = "Runner")

dist_time <- monthly_mean_values %>% 
  ggplot2::ggplot(aes(x = year_month, y = distance, color = runner)) +
  geom_line(size = 0.8) +
  labs(title = "Distance Travelled Over the Years", x = "", y = "Distance (in KM)") +
  theme(legend.position = "none")
  
dist_cum_time <- cum_val %>% 
  ggplot2::ggplot(aes(x = date, y= cum_distance, color = runner)) +
  geom_line(size = 1) +
  labs(title = "Total Distance Travelled", x = "", y = "") +
  theme(legend.position = "none")

aero_time <- monthly_mean_values %>%
  ggplot2::ggplot(aes(x = year_month, y = aerobic_te, color = runner)) +
  geom_line(size = 0.8) +
  labs(title = "Aerobic TE Over The Years", y = "Aerobic TE", x = "") +
  theme(legend.position = "none")

aero_cum_time <- cum_val %>% 
  ggplot2::ggplot(aes(x = date, y = cum_aerobic_te, color = runner)) +
  geom_line(size = 1) + 
  labs(title = "Total Aerobic TE", y = "", x ="", color = "Runner")

pace_time <- monthly_mean_values %>%
  ggplot2::ggplot(aes(x = year_month, y = avg_pace, color = runner)) +
  geom_line(size = 0.8) +
  labs(title = "Average Pace Over The Years", y ="Average Pace (min/km)",x="Time")+
  theme(legend.position = "none")

speed_time <- monthly_mean_values %>% 
  ggplot2::ggplot(aes(x = year_month, y = avg_speed, color = runner)) +
  geom_line(size = 0.8) +
  labs(title = "Changes in Speed over the Years", x = "", y = "Speed (KM/hr)") +
  theme(legend.position = "none")

ascent_time <- monthly_mean_values %>%
  tidyr::drop_na() %>%
  ggplot2::ggplot(aes(x=year_month, y= avg_ascent, color = runner)) +
  geom_line(size = 0.8) +
  labs(title = "Changes in Ascent over the Years", x = "", y = "Total Ascent") +
  theme(legend.position = "none")

ascent_cum_time <- cum_val %>%
  ggplot2::ggplot(aes(x = date, y = cum_ascent, color = runner)) +
  geom_line(size = 1) +
  labs(title = "Total Ascent", x = "", y = "", color = "Runner")

desc_time <- monthly_mean_values %>%
  tidyr::drop_na() %>%
  ggplot2::ggplot(aes(x=year_month, y= avg_descent, color = runner)) +
  geom_line(size = 0.8) +
  labs(title = "Changes in Descent over the Years", x = "", y = "Total Descent") +
  theme(legend.position = "none")

desc_cum_time <- cum_val %>%
  ggplot2::ggplot(aes(x = date, y = cum_descent, color = runner)) +
  geom_line(size = 1) +
  labs(title = "Total Decent", x = "", y = "") +
  theme(legend.position = "none")

```

## Taking a look at how our Runners perform individually

### Over the years:

```{r cal_distance_charts}
library(patchwork)
((cal_time | cal_cum_time) / (dist_time | dist_cum_time))

```

We can see from our analysis of Calories and Distance that Hound tends to have a more variable running pattern, with periods of high-intensity or longer runs mixed with lower-intensity periods. While Collie, likes to focus on a more steady and consistent running regimen. The spikes in Hound's charts suggest that Hound is more likely to engage in intensive training, which can indicate that they would enjoy a strategy focused on periodic intense efforts. While Collie's consistency can reflect a more sustainable or gradual training approach.

```{r Ascent_Descent_charts}
((ascent_time | ascent_cum_time) / (desc_time | desc_cum_time))
```

Collie continues to appear to have a consistent effort when it comes to elevation gain, consistently accumulating elevation, suggesting that they enjoy more long-term endurance training on hilly or elevated routes, this is also clear when we analyze their Activity types, Collie predominantly enjoys trail running over anything else. While Hound tends to engage in more intense efforts for higher ascent in individual runs, overall, these efforts haven't resulted in as much elevation gain over time as Collie's more consistent approach. Examining Hounds activity types, it is clear that Hound doesn't engage in trail running as much as Collie, they prefer to do more track running, street running, and work on the treadmill.

It is clear that Collie has an advantage in terms of total ascent, indicating that a steady focus on elevation during runs would be a good way to coach them. While Hound may enjoy a more interval-based approach to training on inclines.

```{r}
((aero_time | aero_cum_time) / (pace_time | speed_time))
```

With the analysis of speed and Aerobic training effect, we can see that Collie remains consistently achieving a higher TE over the years compared to Hound with fewer fluctuations. This is more pronounced when we get the cumulative total of aerobic TE, suggesting that Collie has a more moderate and consistent level of aerobic challenge throughout his training sessions. When compared to Hound who has a more variable yet gradual increase of cumulative aerobic TE.

When taking a look at the pace and speed of our runners, there is an interesting insight showing that despite Collie's approach to more trail running, they maintain a lower pace than Hound on average and this translates into a higher speed as shown in the above chart.

```{r multi_charts}
#| include: false
library(patchwork)

((cal_time | cal_cum_time) / (dist_time | dist_cum_time))
((ascent_time | ascent_cum_time) / (desc_time | desc_cum_time))
((aero_time | aero_cum_time) / (pace_time | speed_time))

```

```{r Spider_chart_data}
#Spider Chart Data


fdf_spider_overall<- fdf_final %>%
  dplyr::group_by(runner) %>%
  dplyr::summarise(
    calories = mean(calories),
    distance = mean(distance),
    aerobic_te = mean(aerobic_te, na.rm = TRUE),
    avg_stride_length = mean(avg_stride_length, na.rm = TRUE),
    avg_run_cadence = mean(avg_run_cadence, na.rm = TRUE),
    avg_speed = mean(avg_speed, na.rm = TRUE),
  )

fdf_spider_2020<- fdf_final %>%
  dplyr::group_by(runner) %>%
  dplyr::filter(date >= as.Date("2020-06-14") & date <= as.Date("2020-12-31")) %>% 
  dplyr::summarise(
    calories = mean(calories),
    distance = mean(distance),
    aerobic_te = mean(aerobic_te, na.rm = TRUE),
    avg_stride_length = mean(avg_stride_length, na.rm = TRUE),
    avg_run_cadence = mean(avg_run_cadence, na.rm = TRUE),
    avg_speed = mean(avg_speed, na.rm = TRUE)
  )

fdf_spider_2021<- fdf_final %>%
  dplyr::group_by(runner) %>%
  dplyr::filter(date >= as.Date("2021-01-01") & date <= as.Date("2021-12-31")) %>% 
  dplyr::summarise(
    calories = mean(calories),
    distance = mean(distance),
    aerobic_te = mean(aerobic_te, na.rm = TRUE),
    avg_stride_length = mean(avg_stride_length, na.rm = TRUE),
    avg_run_cadence = mean(avg_run_cadence, na.rm = TRUE),
    avg_speed = mean(avg_speed, na.rm = TRUE)
  )

fdf_spider_2022<- fdf_final %>%
  dplyr::group_by(runner) %>%
  dplyr::filter(date >= as.Date("2022-01-01") & date <= as.Date("2022-12-31")) %>% 
  dplyr::summarise(
    calories = mean(calories),
    distance = mean(distance),
    aerobic_te = mean(aerobic_te, na.rm = TRUE),
    avg_stride_length = mean(avg_stride_length, na.rm = TRUE),
    avg_run_cadence = mean(avg_run_cadence, na.rm = TRUE),
    avg_speed = mean(avg_speed, na.rm = TRUE)
  )

fdf_spider_2023<- fdf_final %>%
  dplyr::group_by(runner) %>%
  dplyr::filter(date >= as.Date("2023-01-01") & date <= as.Date("2023-12-31")) %>% 
  dplyr::summarise(
    calories = mean(calories),
    distance = mean(distance),
    aerobic_te = mean(aerobic_te, na.rm = TRUE),
    avg_stride_length = mean(avg_stride_length, na.rm = TRUE),
    avg_run_cadence = mean(avg_run_cadence, na.rm = TRUE),
    avg_speed = mean(avg_speed, na.rm = TRUE)
  )

max_values <- c(1000, 15, 5, 2, 200, 15)
min_values <- rep(0,6)

```

### Performance Overall

```{r Overall_spider_chart, fig.width= 6, fig.height= 3.8}
#Overall Spider Chart
library(fmsb)

fitness_spider_chart <- rbind(
  max_values,
  min_values,
  fdf_spider_overall %>% dplyr::select(-runner)
  )
rownames(fitness_spider_chart) <- c("Max", "Min", fdf_spider_overall$runner)

colnames(fitness_spider_chart) <- c(
  "Calories", 
  "Distance", 
  "Aerobic TE", 
  "Stride Length", 
  "Run Cadence", 
  "Average Speed"
)

fmsb::radarchart(
    fitness_spider_chart,
    axistype = 1,
    pcol = c("red", "green"),
    plwd = 4,
    cglcol = "grey",
    cglty = 1,
    cglwd = 1.2,
    caxislabels = (c("","","","","")),
    calcex = 0.8,
    axislabcol = "blue",
    vlcex = 0.8,
    title = "Overall Fitness Metrics"
)
graphics::legend(x = "right", legend = fdf_spider_overall$runner,
                 col = c("red","green"),
       lwd = 1, bty = "o")
```

Taking a look at the overall fitness metrics of each runner:

-   Collie overall outperforms Hound in key fitness metrics such as Aerobic TE, Average Speed, Run Cadence, and Stride Length, which are the most critical indicators of overall running fitness, cardiovascular endurance, and efficiency.

-   Hound overall excels in Calories burned and distance traveled, suggesting a higher energy output and endurance compared to Collie, but it is clear that Hound might benefit from a more structured training focused on aerobic improvement and speed to match Collie's overall fitness levels.

### Performance Over the years

```{r Spider_chart_years, fig.width = 6, fig.height = 3.8}
#Spider Charts over the years

graphics::par(mfrow = c(1,2))

fitness_spider_chart_2020 <- rbind(
  max_values,
  min_values,
  fdf_spider_2020 %>% dplyr::select(-runner)
  )
rownames(fitness_spider_chart_2020) <- c("Max", "Min", fdf_spider_2020$runner)

colnames(fitness_spider_chart_2020) <- c(
  "Calories", 
  "Distance", 
  "Aero TE", 
  "Stride Length", 
  "Cadence", 
  "Speed"
)

fmsb::radarchart(
    fitness_spider_chart_2020,
    axistype = 1,
    pcol = c("red", "green"),
    plwd = 4,
    cglcol = "grey",
    cglty = 1,
    cglwd = 1.2,
    caxislabels = (c("","","","","")),
    calcex = 0.8,
    axislabcol = "blue",
    vlcex = 0.8,
    title = "Fitness Metrics in 2020"
)


fitness_spider_chart_2021 <- rbind(
  max_values,
  min_values,
  fdf_spider_2021 %>% dplyr::select(-runner)
  )
rownames(fitness_spider_chart_2021) <- c("Max", "Min", fdf_spider_2021$runner)

colnames(fitness_spider_chart_2021) <- c(
  "Calories", 
  "Distance", 
  "Aero TE", 
  "Stride Length", 
  "Cadence", 
  "Speed"
)
fmsb::radarchart(
    fitness_spider_chart_2021,
    axistype = 1,
    pcol = c("red", "green"),
    plwd = 4,
    cglcol = "grey",
    cglty = 1,
    cglwd = 1.2,
    caxislabels = (c("","","","","")),
    calcex = 0.8,
    axislabcol = "blue",
    vlcex = 0.8,
    title = "Fitness Metrics in 2021"
)


fitness_spider_chart_2022 <- rbind(
  max_values,
  min_values,
  fdf_spider_2022 %>% dplyr::select(-runner)
  )
rownames(fitness_spider_chart_2022) <- c("Max", "Min", fdf_spider_2022$runner)

colnames(fitness_spider_chart_2022) <- c(
  "Calories", 
  "Distance", 
  "Aero TE", 
  "Stride Length", 
  "Cadence", 
  "Speed"
)
fmsb::radarchart(
    fitness_spider_chart_2022,
    axistype = 1,
    pcol = c("red", "green"),
    plwd = 4,
    cglcol = "grey",
    cglty = 1,
    cglwd = 1.2,
    caxislabels = (c("","","","","")),
    calcex = 0.8,
    axislabcol = "blue",
    vlcex = 0.8,
    title = "Fitness Metrics in 2022"
)


fitness_spider_chart_2023 <- rbind(
  max_values,
  min_values,
  fdf_spider_2023 %>% dplyr::select(-runner)
  )
rownames(fitness_spider_chart_2023) <- c("Max", "Min", fdf_spider_2023$runner)

colnames(fitness_spider_chart_2023) <- c(
  "Calories", 
  "Distance", 
  "Aero TE", 
  "Stride Length", 
  "Cadence", 
  "Speed"
)

fmsb::radarchart(
    fitness_spider_chart_2023,
    axistype = 1,
    pcol = c("red", "green"),
    plwd = 4,
    cglcol = "grey",
    cglty = 1,
    cglwd = 1.2,
    caxislabels = (c("","","","","")),
    calcex = 0.8,
    axislabcol = "blue",
    vlcex = 0.8,
    title = "Fitness Metrics in 2023"
)


graphics::par(mfrow = c(1, 1))
```

We can see that throughout the years Collie has maintained a better speed, stride length, and higher Aerobic TE training. However, It seems as if Hound has maintained an overall higher energy expenditure and has had slightly more distance traveled than Collie, with the exception of 2022 where it is observed that Collie was taking it more easy with their running activities.

In terms of improvement, it is clear that both Collie and Hound have made improvements to both their efficiency, running mechanics, and endurance. The abilities in both of our runners are clearly getting better and they both have a dedication to training albeit one is more consistent in terms of Aerobic TE and growth

## How does our Model Perform?

We have decided to make our model based off of **Aerobic TE** being **the dependent variable** and with **Average Pace**, **Average Heart rate**, **distance**, and **total** **ascent** being t**he independent variables**. We will be running our models based on this order in terms of $R^2$ (highest to lowest), here are the following results.

```{r models}
#| include: FALSE
library(broom)
library(gt)

fit1 <- lm(aerobic_te ~ avg_pace, fdf_final)
fit2 <- lm(aerobic_te ~ avg_pace + avg_hr, fdf_final)
fit3 <- lm(aerobic_te ~ avg_pace + avg_hr + distance, fdf_final)
fit4 <- lm(aerobic_te ~ avg_pace + avg_hr + distance + total_ascent, fdf_final)
```

```{r regressions}
library(rlang)
library(glue)

df.reg <- fdf_final %>%
  filter(!is.na(total_ascent)) %>%
  dplyr::select(distance, avg_hr, avg_pace, total_ascent) %>%
  purrr::map(~lm(fdf_final$aerobic_te ~ .x, data = fdf_final)) %>%
  purrr::map(summary) %>%
  purrr::map_dbl("r.squared") %>%
  tibble::tibble(Predictors = names(.), r.squared =.) %>%
  dplyr::arrange(desc(.[[2]]))

fdf_final3 <- fdf_final %>% dplyr::select(1, aerobic_te, df.reg$Predictors)
dependent <- names(fdf_final3)[2]
independent <- names(fdf_final3)[-1:-2]

out <- dplyr::tibble(model = character(), formula = character())

for (i in 1:length(independent)) {
  betas <- paste(independent[1:i], collapse = " + ")
  out[i, 1] <- glue::glue("{dependent} ~ {betas}")
}

out %>%
  dplyr::mutate(output = purrr::pmap(.l = list(formula = model, data = list(fdf_final3)), .f = stats::lm),
                res = purrr::map(.x = output, .f = broom::glance)) %>%
  tidyr::unnest(res) %>%
  dplyr::select(model,output,r.squared,adj.r.squared, p.value) %>%
  dplyr::mutate_if(is.numeric, round, 3)

```

We can see that all of our models have significance, however the final model including all of our variables have the highest explanation of $R^2_{adjusted}$ we can take a closer look at our final model to see if there is the presence of multicolinearity, if our terms are significant, and if our Residuals follow the assumptions of a liner regression.

```{r summary_model_4}
broom::tidy(fit4)

```

Taking a look at the P-values of our predictors we can see that they all hold statistical significance, meaning they all contribute meaningfully to predicting Aerobic TE. The key Findings of this model suggest that increasing distance, heart rate, and elevation gain (total ascent) during training can enhance Aerobic training effects, while having slower paces can reduce it.

```{r}
vif_results <- car::vif(fit4)
tidy_vif <- tibble::enframe(vif_results, name = "Predictors", value = "VIF")
tidy_vif
```

Judging from our VIF results we can see that our model seems to have very low multicollinearity; these values lay within the boundary of 1 \< VIF \< 5, which is within the typical acceptable limits and are generally not problematic.

```{r}
library(ggfortify)

autoplot(fit4)

augmented_data <- augment(fit4)

augmented_data %>% ggplot(aes(x = .fitted, y = aerobic_te)) +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  xlim(NA, 5)
  

```

Analyzing our residuals gives us some insights to our model, we can see that with the curved pattern in the residuals vs. fitted plot, our model may benefit from polynomial or interaction terms. In the Q-Q plot we can see that for the most part our residuals are normally distributed with some drifting at the tails. The Scale-location plot shows that we have some heteroscedasticity in our model, and that there are a couple of influential points effecting our model.

Analyzing the specific points in the model shows that they are not outstanding outliers, they actually rather serve to explain the nature of Aerobic TE and how it can be skewed depending on a multitude of factors not explained in our model and data, such as hydration, sleep quality, and nutrition on the day of the run.

## Recommendation

Based on our model, we would like to implement a training strategy that focuses on increasing distance, heart rate, elevation gain, while maintaining a faster pace. In the efforts to maximize aerobic training effect, which should improve overall fitness over time.

Hound shows variable training patterns compared to Collie. There are periods of high intensity workouts and low intensity workouts. Collie, on the other hand, shows sustained training progression. As mentioned earlier, this means that if you are looking to coach someone for high performance, Hound is a better candidate because he shows strong adaptation to intensive training and can handle different training loads. Downside of this is this indicates a higher injury risk for variable intensity workouts.

Collie has better baseline maintenance, consistent, steady training, and progression patterns. This is reflected through his consistent heart rates adhering to similar distances. This implies that he has consistent fitness levels throughout the years.

Hound has higher caloric expenditure by distance that implies greater work intensity in his workouts which also reflects his higher heart rate. On the other hand, Collie has consistent energy usage in his workouts.

On the basis of these conclusions, Hound is a viable option for coaching over Collie. Primarily, because Hound's variable patterns and peak loads in fitness parameters could be optimized to result in consistent fitness levels. This can be done through structured coaching in a more controlled environment, which Hound prefers after analyzing his main activity types. We expect to see more improvement in Hound's overall fitness improvements than Collie's as a result of this. Not to say that Collie cannot be coached, however, there is major room for growth from Hound.
